{"version":3,"sources":["webpack:///./src/components/manage/Widgets/DatetimeWidget.jsx"],"names":["TimePicker","loadable","messages","defineMessages","date","time","PrevIcon","style","color","left","padding","position","top","tabIndex","name","leftKey","size","NextIcon","right","rightKey","defaultTimeDateOnly","hour","minute","second","DatetimeWidgetComponent","Component","constructor","props","super","moment","this","default","isDateOnly","getDateOnly","base","getInternalValue","set","year","month","dateValue","format","toISOString","onChange","id","setState","isDefault","hours","minutes","seconds","focused","state","parseDateTime","intl","locale","value","undefined","utc","dateOnly","widget","render","resettable","reactDates","widgetOptions","noPastDates","pattern_options","datetime","SingleDatePicker","className","cx","disabled","isDisabled","onDateChange","numberOfMonths","isOutsideRange","onFocusChange","noBorder","displayFormat","localeData","longDateFormat","navPrev","navNext","placeholder","formatMessage","defaultValue","onTimeChange","allowEmpty","showSecond","use12Hours","focusOnOpen","placement","onClick","onResetDates","clearSVG","defaultProps","description","required","error","compose","injectLazyLibs","injectIntl"],"mappings":"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","file":"static/js/plone-volto-components-manage-Widgets-DatetimeWidget.c847a331.chunk.js","sourcesContent":["/**\n * DatetimeWidget component.\n * @module components/manage/Widgets/DatetimeWidget\n */\nimport React, { Component } from 'react';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport cx from 'classnames';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { parseDateTime } from '@plone/volto/helpers';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nimport leftKey from '@plone/volto/icons/left-key.svg';\nimport rightKey from '@plone/volto/icons/right-key.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nimport 'rc-time-picker/assets/index.css';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n\nconst TimePicker = loadable(() => import('rc-time-picker'));\n\nconst messages = defineMessages({\n  date: {\n    id: 'Date',\n    defaultMessage: 'Date',\n  },\n  time: {\n    id: 'Time',\n    defaultMessage: 'Time',\n  },\n});\n\nconst PrevIcon = () => (\n  <div\n    style={{\n      color: '#000',\n      left: '22px',\n      padding: '5px',\n      position: 'absolute',\n      top: '15px',\n    }}\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    tabIndex=\"0\"\n  >\n    <Icon name={leftKey} size=\"30px\" />\n  </div>\n);\nconst NextIcon = () => (\n  <div\n    style={{\n      color: '#000',\n      right: '22px',\n      padding: '5px',\n      position: 'absolute',\n      top: '15px',\n    }}\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    tabIndex=\"0\"\n  >\n    <Icon name={rightKey} size=\"30px\" />\n  </div>\n);\n\nconst defaultTimeDateOnly = {\n  hour: 12,\n  minute: 0,\n  second: 0,\n};\n\n/**\n * DatetimeWidget component class\n * @class DatetimeWidget\n * @extends Component\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Publish date\",\n *  type: 'datetime',\n * }\n * ```\n */\nexport class DatetimeWidgetComponent extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DatetimeWidget\n   */\n  constructor(props) {\n    super(props);\n    this.moment = props.moment.default;\n\n    this.state = {\n      focused: false,\n      // if passed value matches the construction time, we guess it's a default\n      isDefault:\n        parseDateTime(\n          this.props.intl.locale,\n          this.props.value,\n          undefined,\n          this.moment,\n        )?.toISOString() === this.moment().utc().toISOString(),\n    };\n  }\n\n  getInternalValue() {\n    return parseDateTime(\n      this.props.intl.locale,\n      this.props.value,\n      undefined,\n      this.moment,\n    );\n  }\n\n  getDateOnly() {\n    return this.props.dateOnly || this.props.widget === 'date';\n  }\n\n  /**\n   * Update date storage\n   * @method onDateChange\n   * @param {Object} date updated momentjs Object for date\n   * @returns {undefined}\n   */\n  onDateChange = (date) => {\n    if (date) {\n      const moment = this.props.moment.default;\n      const isDateOnly = this.getDateOnly();\n      const base = (this.getInternalValue() || moment()).set({\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        ...(isDateOnly ? defaultTimeDateOnly : {}),\n      });\n      const dateValue = isDateOnly\n        ? base.format('YYYY-MM-DD')\n        : base.toISOString();\n      this.props.onChange(this.props.id, dateValue);\n    }\n    this.setState({ isDefault: false });\n  };\n\n  /**\n   * Update date storage\n   * @method onTimeChange\n   * @param {Object} time updated momentjs Object for time\n   * @returns {undefined}\n   */\n  onTimeChange = (time) => {\n    const moment = this.props.moment.default;\n    if (time) {\n      const base = (this.getInternalValue() || moment()).set({\n        hours: time?.hours() ?? 0,\n        minutes: time?.minutes() ?? 0,\n        seconds: 0,\n      });\n      const dateValue = base.toISOString();\n      this.props.onChange(this.props.id, dateValue);\n    }\n  };\n\n  onResetDates = () => {\n    this.setState({ isDefault: false });\n    this.props.onChange(this.props.id, null);\n  };\n\n  /**\n   * Handle SingleDatePicker focus\n   * @method onFocusChange\n   * @param {boolean} focused component focus state.\n   * @returns {undefined}\n   */\n  onFocusChange = ({ focused }) => this.setState({ focused });\n\n  render() {\n    const { id, resettable, intl, reactDates, widgetOptions } = this.props;\n    const noPastDates =\n      this.props.noPastDates || widgetOptions?.pattern_options?.noPastDates;\n    const moment = this.props.moment.default;\n    const datetime = this.getInternalValue();\n    const dateOnly = this.getDateOnly();\n    const { SingleDatePicker } = reactDates;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <div className=\"date-time-widget-wrapper\">\n          <div\n            className={cx('ui input date-input', {\n              'default-date': this.state.isDefault,\n            })}\n          >\n            <SingleDatePicker\n              date={datetime}\n              disabled={this.props.isDisabled}\n              onDateChange={this.onDateChange}\n              focused={this.state.focused}\n              numberOfMonths={1}\n              {...(noPastDates ? {} : { isOutsideRange: () => false })}\n              onFocusChange={this.onFocusChange}\n              noBorder\n              displayFormat={moment.localeData(intl.locale).longDateFormat('L')}\n              navPrev={<PrevIcon />}\n              navNext={<NextIcon />}\n              id={`${id}-date`}\n              placeholder={intl.formatMessage(messages.date)}\n            />\n          </div>\n          {!dateOnly && (\n            <div\n              className={cx('ui input time-input', {\n                'default-date': this.state.isDefault,\n              })}\n            >\n              <TimePicker\n                disabled={this.props.isDisabled}\n                defaultValue={datetime}\n                value={datetime}\n                onChange={this.onTimeChange}\n                allowEmpty={false}\n                showSecond={false}\n                use12Hours={intl.locale === 'en'}\n                id={`${id}-time`}\n                format={moment.localeData(intl.locale).longDateFormat('LT')}\n                placeholder={intl.formatMessage(messages.time)}\n                focusOnOpen\n                placement=\"bottomRight\"\n              />\n            </div>\n          )}\n          {resettable && (\n            <button\n              disabled={this.props.isDisabled || !datetime}\n              onClick={() => this.onResetDates()}\n              className=\"item ui noborder button\"\n            >\n              <Icon name={clearSVG} size=\"24px\" className=\"close\" />\n            </button>\n          )}\n        </div>\n      </FormFieldWrapper>\n    );\n  }\n}\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDatetimeWidgetComponent.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  dateOnly: PropTypes.bool,\n  noPastDates: PropTypes.bool,\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  resettable: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nDatetimeWidgetComponent.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  dateOnly: false,\n  noPastDates: false,\n  value: null,\n  resettable: true,\n};\n\nexport default compose(\n  injectLazyLibs(['reactDates', 'moment']),\n  injectIntl,\n)(DatetimeWidgetComponent);\n"],"sourceRoot":""}