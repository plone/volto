/*
This file is autogenerated. Don't change it directly.
Instead, change the "addons" setting in your package.json file.
*/

import ploneblocks from '@plone/blocks';
import ploneslots from '@plone/slots';

const addonsInfo = [
  {
    name: '@plone/blocks',
    version: '1.0.0-alpha.1',
    isPublishedPackage: true,
    isRegisteredAddon: true,
    modulePath: '/Users/sneridagh/Development/plone/volto/packages/blocks',
    packageJson:
      '/Users/sneridagh/Development/plone/volto/packages/blocks/package.json',
    basePath: '/Users/sneridagh/Development/plone/volto/packages/blocks',
    tsConfigPaths: ['', {}],
    addons: [],
  },
  {
    name: '@plone/slots',
    version: '1.0.0',
    isPublishedPackage: true,
    isRegisteredAddon: true,
    modulePath: '/Users/sneridagh/Development/plone/volto/packages/slots',
    packageJson:
      '/Users/sneridagh/Development/plone/volto/packages/slots/package.json',
    basePath: '/Users/sneridagh/Development/plone/volto/packages/slots',
    tsConfigPaths: ['', {}],
    addons: [],
  },
];
export { addonsInfo };

const safeWrapper = (func) => (config) => {
  const res = func(config);
  if (typeof res === 'undefined') {
    throw new Error("Configuration function doesn't return config");
  }
  return res;
};

const projectConfigLoader = false;
const projectConfig = (config) => {
  return projectConfigLoader &&
    typeof projectConfigLoader.default === 'function'
    ? projectConfigLoader.default(config)
    : config;
};

const load = (config) => {
  const addonLoaders = [ploneblocks, ploneslots];
  if (!addonLoaders.every((el) => typeof el === 'function')) {
    throw new TypeError(
      'Each addon has to provide a function applying its configuration to the projects configuration.',
    );
  }
  return projectConfig(
    addonLoaders.reduce((acc, apply) => safeWrapper(apply)(acc), config),
  );
};
export default load;
