name: Acceptance Tests
on: [push]
jobs:
  core:
    runs-on: ubuntu-latest
    name: Core Basic
    timeout-minutes: 45
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      ## node install
      - run: yarn --frozen-lockfile

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: false # Since they run on different node versions, we can't parallel
          browser: chrome
          # headless: true
          group: Core ${{ matrix.node-version }}
          spec: cypress/tests/core/basic/**/*.js
          start: |
            make start-test-acceptance-server
            make start-test-acceptance-frontend
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  coreblocks:
    runs-on: ubuntu-latest
    name: Core Blocks
    timeout-minutes: 35
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      ## node install
      - run: yarn --frozen-lockfile

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: false # Since they run on different node versions, we can't parallel
          browser: chrome
          # headless: true
          group: Core Blocks ${{ matrix.node-version }}
          spec: cypress/tests/core/blocks/**/*.js
          start: |
            make start-test-acceptance-server
            make start-test-acceptance-frontend
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  corevoltoslate:
    runs-on: ubuntu-latest
    name: Core Volto Slate
    timeout-minutes: 45
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      ## node install
      - run: yarn --frozen-lockfile

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: false # Since they run on different node versions, we can't parallel
          browser: chrome
          # headless: true
          group: Core Volto Slate ${{ matrix.node-version }}
          spec: cypress/tests/core/volto-slate/**/*.js
          start: |
            make start-test-acceptance-server
            make start-test-acceptance-frontend
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  core6:
    runs-on: ubuntu-latest
    name: Core Basic - Plone 6
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      ## node install
      - run: yarn --frozen-lockfile

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: false # Since they run on different node versions, we can't parallel
          browser: chrome
          # headless: true
          group: Core Basic - Plone 6
          spec: cypress/tests/core/basic/**/*.js
          start: |
            make start-test-acceptance-server DOCKER_IMAGE=plone/plone-backend:6.0.0b1 KGS=
            make start-test-acceptance-frontend
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  coresandbox:
    runs-on: ubuntu-latest
    name: Coresandbox
    timeout-minutes: 35
    strategy:
      matrix:
        node-version: [16.x]
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
      - name: debug
        working-directory: api
        run: ls -al

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn --frozen-lockfile

      # python setup (temporary, while p.volto coresandbox changes are in a PR)
      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # # python cache
      # - uses: actions/cache@v1
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      # # python install
      # - run: pip install virtualenv
      # - name: pip install
      #   working-directory: api
      #   run: pip install -r requirements.txt
      # - name: buildout
      #   working-directory: api
      #   run: buildout
      #   env:
      #     CI: true

      - name: Cypress Coresandbox Acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: true
          browser: chrome
          # headless: true
          group: Coresandbox
          spec: cypress/tests/coresandbox/**/*.js
          start: |
            make start-test-acceptance-server-coresandbox
            make start-test-acceptance-frontend-coresandbox
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  guillotina:
    name: Guillotina
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # node install
      - run: yarn --frozen-lockfile

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_API: guillotina
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: true
          browser: chrome
          headless: true
          group: Guillotina
          spec: cypress/tests/guillotina/**/*.js
          start: |
            make start-test-acceptance-server-guillotina
            make start-test-acceptance-frontend-guillotina
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:8081 http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  multilingual:
    name: Multilingual
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: debug
        working-directory: api
        run: ls -al

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # node install
      - run: yarn --frozen-lockfile

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: true
          browser: chrome
          headless: true
          group: Multilingual
          spec: cypress/tests/multilingual/**/*.js
          start: |
            make start-test-acceptance-server-multilingual
            make start-test-acceptance-frontend-multilingual
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  workingcopy:
    name: Working Copy
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      matrix:
        node-version: [16.x]
        # python-version: [3.7]
    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # node install
      - run: yarn --frozen-lockfile

      # # python setup (temporary, while p.a.iterate changes are in a PR)
      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # # python cache
      # - uses: actions/cache@v1
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      # # python install
      # - run: pip install virtualenv
      # - name: pip install
      #   working-directory: api
      #   run: pip install -r requirements.txt
      # - name: buildout
      #   working-directory: api
      #   run: buildout
      #   env:
      #     CI: true

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: true
          browser: chrome
          headless: true
          group: Working Copy
          spec: cypress/tests/workingCopy/**/*.js
          start: |
            make start-test-acceptance-server-workingcopy
            make start-test-acceptance-frontend-workingcopy
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  generator:
    name: Project Generator
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      matrix:
        node-version: [16.x]
    env:
      generator-directory: ./packages/generator-volto
      project-directory: ./my-volto-app

    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Build main Volto environment
      - name: Build main Volto environment
        run: yarn --frozen-lockfile

      # Generator own tests
      - name: Generator tests
        run: yarn && yarn test
        working-directory: ${{env.generator-directory}}

      # install Yeoman and the generator
      - run: npm -g install yo
        working-directory: ${{env.generator-directory}}
      - run: npm -g install ./
        working-directory: ${{env.generator-directory}}

      # create a project
      - run: yo @plone/volto my-volto-app --description "test volto project" --volto . --skip-install --no-interactive

      - name: Install yalc
        run: npm -g install yalc

      - name: Install a yalc'ed version of the current Volto in the project - publish
        run: |
          yalc publish
          yalc publish packages/scripts
      - name: Install a yalc'ed version of the current Volto in the project - add
        run: |
          yalc add @plone/volto --no-pure
          yalc add @plone/scripts --no-pure
        working-directory: ${{env.project-directory}}
      - name: Install a yalc'ed version of the current Volto in the project - install
        run: yarn
        working-directory: ${{env.project-directory}}

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: true
          browser: chrome
          headless: true
          group: Project Generator
          spec: cypress/tests/minimal/**/*.js
          start: |
            make start-test-acceptance-server
            make start-test-acceptance-frontend-project
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Test if npm packs correctly
        run: npm pack --dry-run
        if: success()
        working-directory: ${{env.generator-directory}}

  seamless:
    name: Seamless Mode
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2

      # node setup
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # node cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # node install
      - run: yarn --frozen-lockfile

      - name: Cypress acceptance tests
        uses: cypress-io/github-action@v4
        env:
          BABEL_ENV: production
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_RETRIES: 2
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: true
          parallel: true
          browser: chrome
          headless: true
          group: Seamless
          spec: cypress/tests/minimal/**/*.js
          start: |
            make start-test-acceptance-server
            make start-test-acceptance-frontend-seamless
          wait-on: 'npx wait-on --httpTimeout 20000 http-get://localhost:55001/plone http://localhost:3000'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      # Upload Cypress videos
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos
