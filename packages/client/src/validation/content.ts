import { z } from 'zod';

export const RelatedItemPayloadSchema = z.object({
  '@id': z.string(),
  '@type': z.string(),
  CreationDate: z.string(),
  Creator: z.string(),
  Date: z.string(),
  Description: z.string(),
  EffectiveDate: z.unknown(),
  ExpirationDate: z.unknown(),
  ModificationDate: z.string(),
  Subject: z.array(z.unknown()),
  Title: z.string(),
  Type: z.string(),
  UID: z.string(),
  author_name: z.unknown(),
  cmf_uid: z.unknown(),
  commentators: z.array(z.unknown()),
  created: z.string(),
  description: z.string(),
  effective: z.string(),
  end: z.unknown(),
  exclude_from_nav: z.boolean(),
  expires: z.string(),
  getIcon: z.unknown(),
  getId: z.string(),
  getObjSize: z.string(),
  getPath: z.string(),
  getRemoteUrl: z.unknown(),
  getURL: z.string(),
  hasPreviewImage: z.unknown(),
  head_title: z.unknown(),
  id: z.string(),
  image_field: z.string().nullable(),
  image_scales: z.unknown(),
  in_response_to: z.unknown(),
  is_folderish: z.boolean(),
  last_comment_date: z.unknown(),
  listCreators: z.array(z.string()),
  location: z.unknown(),
  mime_type: z.string(),
  modified: z.string(),
  nav_title: z.unknown(),
  portal_type: z.string(),
  review_state: z.string(),
  start: z.unknown(),
  sync_uid: z.unknown(),
  title: z.string(),
  total_comments: z.number(),
});

export const createContentDataSchema = z.object({
  '@id': z.string().optional(),
  '@static_behaviors': z.unknown().optional(),
  '@type': z.string(),
  allow_discussion: z.boolean().optional(),
  blocks: z.unknown().optional(),
  blocks_layout: z.array(z.string()).optional(),
  contributors: z.array(z.string()).optional(),
  creators: z.array(z.string()).optional(),
  description: z.string().optional(),
  effective: z.string().nullable().optional(),
  exclude_from_nav: z.boolean().optional(),
  expires: z.string().nullable().optional(),
  id: z.string().optional(),
  language: z.string().optional(),
  preview_caption: z.string().optional(),
  preview_image: z
    .object({
      'content-type': z.string(),
      data: z.string(),
      encoding: z.string(),
      filename: z.string(),
    })
    .optional(),
  relatedItems: z.array(RelatedItemPayloadSchema).optional(),
  rights: z.string().nullable().optional(),
  title: z.string(),
  versioning_enabled: z.boolean().optional(),
});

export const updateContentDataSchema = z.object({
  allow_discussion: z.boolean().optional(),
  blocks: z.unknown().optional(),
  blocks_layout: z.array(z.string()).optional(),
  contributors: z.array(z.string()).optional(),
  creators: z.array(z.string()).optional(),
  description: z.string().optional(),
  effective: z.string().nullable().optional(),
  exclude_from_nav: z.boolean().optional(),
  expires: z.string().nullable().optional(),
  id: z.string().nullable().optional(),
  preview_caption: z.string().optional(),
  preview_image: z
    .object({
      'content-type': z.string(),
      data: z.string(),
      encoding: z.string(),
      filename: z.string(),
    })
    .optional(),
  relatedItems: z.array(RelatedItemPayloadSchema).optional(),
  rights: z.string().optional(),
  table_of_contents: z.boolean().nullable().optional(),
  title: z.string().optional(),
  versioning_enabled: z.boolean().optional(),
});
