import fs from 'fs';
import tmp from 'tmp';
import cryptoRandomString from 'crypto-random-string';

const titleCase = (w: string) =>
  w.slice(0, 1).toUpperCase() + w.slice(1, w.length);

/*
 * Transforms a package name to javascript variable name
 */
function nameFromPackage(name: string) {
  name =
    name.replace(/[@~./\\:\s]/gi, '') ||
    cryptoRandomString({ length: 10, characters: 'abcdefghijk' });
  return name
    .split('-')
    .map((w, i) => (i > 0 ? titleCase(w) : w))
    .join('');
}

/*
 * Creates a static file with code necessary to load the addons configuration
 *
 */
function getThemeLoaderCode(name: string, customThemeAddons = []) {
  let buf = `/*
This file is autogenerated. Don't change it directly.
Add a ./theme/_${name}.scss in your add-on to load your theme customizations in the current theme.
*/

`;
  customThemeAddons.forEach((addon) => {
    const customization = `${addon}/theme/${name}`;
    const line = `@import '${customization}';\n`;
    buf += line;
  });

  return buf;
}

export function createThemeAddonsLoader({
  main,
  variables,
}: {
  main: string[];
  variables: string[];
}) {
  const addonsThemeLoaderVariablesPath = tmp.tmpNameSync({ postfix: '.scss' });
  const addonsThemeLoaderMainPath = tmp.tmpNameSync({ postfix: '.scss' });
  fs.writeFileSync(
    addonsThemeLoaderVariablesPath,
    //@ts-expect-error No clue why this is erroring
    new Buffer.from(getThemeLoaderCode('variables', variables)),
  );
  fs.writeFileSync(
    addonsThemeLoaderMainPath,
    //@ts-expect-error No clue why this is erroring
    new Buffer.from(getThemeLoaderCode('main', main)),
  );

  return [addonsThemeLoaderVariablesPath, addonsThemeLoaderMainPath];
}

export { getThemeLoaderCode, nameFromPackage };
