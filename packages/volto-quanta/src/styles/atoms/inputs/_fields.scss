.q.input,
.q .react-select__control {
  @extend %label-medium;
  width: 100%;
  padding: 12px;
  border: 0;
  background-color: $snow;
  border-radius: 6px;
  box-shadow: $litho;
  caret-color: $cobalt;
  color: $denim;
  cursor: text;
  text-overflow: ellipsis;
  transition: background-color $time-tiny ease-in-out,
    box-shadow $time-tiny ease-in-out;

  &:hover {
    background-color: $smoke;
  }

  &:active,
  &:focus {
    background-color: $air;
    box-shadow: inset 0 0 0 2px $cobalt;
    outline: 0;
  }

  &::placeholder {
    color: $dolphin;
    opacity: 0;
    transition: opacity $time-tiny ease-in-out;
  }

  &:active::placeholder,
  &:focus::placeholder {
    opacity: 1;
  }

  + label + *:not(.resizer),
  + label + .resizer + * {
    padding-top: 3px;
  }
}

.q .react-select-container {
  // We force the height of the value container, to maintain the height
  .react-select__value-container {
    height: 29px;
  }
  // The multi (tokenized) have less padding to maintain the height
  .react-select__control {
    padding: 8px;
  }

  .react-select--is-multi .react-select__indicator {
    padding: 0;
  }
}

//// Label
.q.input,
.q.react-select-container {
  + label {
    position: absolute;
    top: 12px;
    left: 12px;
    color: $sapphire;
    pointer-events: none;
    touch-action: none;
    transition: margin-top $time-tiny ease-in-out,
      margin-left $time-tiny ease-in-out, transform $time-tiny ease-in-out;
    user-select: none;
    @extend %label-medium;
  }

  &:active + label,
  &:focus + label,
  &:not(:placeholder-shown) + label,
  &.react-select--has-placeholder + input + label,
  &.react-select--is-focused + input + label,
  &.react-select--has-value + input + label {
    // Remove important if we get rid of semanticUI field
    margin-top: -30px !important;
    margin-left: -12px !important;
    transform: scale(0.8571428571, 0.8571428571);
    transform-origin: 0 0;
  }

  &:not(:placeholder-shown):not(:hover):not(:active):not(:focus) + label {
    color: $pigeon;
  }

  + label::after {
    // Marks after Label (Optinal, Mandatory, Autofilled)
    @extend %label-small;
    display: inline-block;
    margin-left: 3px;
    color: $iron;
    line-height: 0;
    vertical-align: middle;
  }
}

//*// INPUT VARIANTS

//// Date
.q.input {
  &[type='date'],
  &[type='datetime-local'] {
    //firefox does not support datetime-local
    text-transform: uppercase;

    &::placeholder,
    &::-moz-placeholder {
      text-transform: revert;
    }
  }

  &[type='month']::-webkit-datetime-edit-month-field {
    text-transform: capitalize;
  }

  &::-webkit-datetime-edit-text {
    margin: 0 6px;
    color: $dolphin;
    font-weight: 400;
  }

  &::-webkit-calendar-picker-indicator {
    width: 30px;
    height: 30px;
    padding: 0;
    margin: -6px -6px -6px 0;
    background: url($icon-calendar) no-repeat center center;
    background-color: transparent;
    border-radius: 50%;
    color: rgba(0, 0, 0, 0);
    cursor: pointer;
    opacity: 1;
    transition: background-color $time-tiny ease-in-out;

    &:hover {
      background-color: $snow;
    }

    &:active {
      background-color: $smoke;
    }
  }
}

//// Password
.q.input[type='password'] {
  letter-spacing: 0.125rem;

  &::placeholder {
    letter-spacing: 0;
  }
}

//// Number
.q.input[type='number'] {
  -moz-appearance: textfield;
}

//// Inner buttons
.q.input::-webkit-inner-spin-button {
  display: none;
}

.q.input::-webkit-clear-button {
  display: none;
}

//*// STATES

//// Error (State of input)
.q.field .input.error,
.q.field
  .react-select-container.react-select--has-error
  .react-select__control {
  background-color: $ballet;
  caret-color: $rose;

  &:hover {
    background-color: $flamingo;
  }

  &:active,
  &:focus {
    background-color: $air;
    box-shadow: inset 0 0 0 2px $rose;
  }

  + label {
    color: $candy !important;

    &::after {
      filter: none !important;
    }
  }
}

.q.field .react-select-container.react-select--has-error + input + label {
  color: $candy !important;

  &::after {
    filter: none !important;
  }
}

//// Autolfilled
.q.field .input.autofilled,
.q.field .input:-webkit-autofill {
  background-color: $arctic;
  color: $royal;
}

.q.field .input.autofilled:hover,
input:-webkit-autofill:hover {
  background-color: $sky;
  color: $royal;
}

.q.field .input.autofilled + label::after,
.q.field .input:-webkit-autofill + label::after {
  content: 'â€” Autofilled';
}

//// Select
select.q.input {
  background-image: url($icon-chevrondown);
  background-position: calc(100% - 12px) center;
  background-repeat: no-repeat;
  cursor: pointer;

  &:focus {
    background-image: url($icon-chevronup);
  }
}

//// Dim
.q.input.dim {
  padding: 6px 12px;
  background-color: transparent;

  &:hover:not(:focus):not(:active) {
    background-color: $snow;
  }

  & + label {
    top: 6px;
    overflow: hidden;
    opacity: 1;
    transform: opacity 2s ease;
  }

  &:active + label,
  &:focus + label,
  &:not(:placeholder-shown) + label {
    margin-top: 0;
    margin-left: 0;
    opacity: 0;
    transform: scale(1, 1);
  }
}

//// Disabled
.q.input[disabled],
.q.react-select-container.react-select--is-disabled {
  background-color: $air !important;
  border-radius: 6px;
  box-shadow: inset 0 0 0 1px $snow;
  color: $smoke !important;
  pointer-events: none;

  + label {
    color: $smoke !important;
  }

  &:not([value]) + label {
    margin-top: 0;
    margin-left: 0;
    transform: scale(1, 1);
    transform-origin: 0 0;
  }

  &::placeholder {
    opacity: 0;
  }
}

.q.react-select-container.react-select--is-disabled + input + label {
  color: $smoke !important;
}

//// Readonly
.q.input[readonly] {
  background-color: $air !important;
  box-shadow: inset 0 0 0 1px $snow !important;

  & + label {
    color: $pigeon !important;
  }
}
