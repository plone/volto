const path = require('path');
const fs = require('fs');
const tmp = require('tmp');
const cryptoRandomString = require('crypto-random-string');

const titleCase = (w) => w.slice(0, 1).toUpperCase() + w.slice(1, w.length);

/*
 * Transforms a package name to javascript variable name
 */
function nameFromPackage(name) {
  name =
    name.replace(/[@~./\\:\s]/gi, '') ||
    cryptoRandomString({ length: 10, characters: 'abcdefghijk' });
  return name
    .split('-')
    .map((w, i) => (i > 0 ? titleCase(w) : w))
    .join('');
}

/*
 * Creates a static file with code necessary to load the addons configuration
 *
 */
function getAddonsLoaderCode(name, customThemeAddons = []) {
  let buf = `/*
This file is autogenerated. Don't change it directly.
Add a ./theme/_${name}.scss in your add-on to load your theme customizations in the current theme.
*/

`;
  customThemeAddons.forEach((addon) => {
    const customization = `${addon}/theme/${name}`;
    const line = `@import '${customization}';\n`;
    buf += line;
  });

  return buf;
}

module.exports = ({ main, variables }) => {
  // const addonsThemeLoaderVariablesPath = path.join(
  //   process.cwd(),
  //   'src',
  //   '_variables.scss',
  // );
  // const addonsThemeLoaderMainPath = path.join(
  //   process.cwd(),
  //   'src',
  //   '_main.scss',
  // );

  // const addonsThemeLoaderVariablesPath = path.join(
  //   process.cwd(),
  //   'src',
  //   '_variables.scss',
  // );
  // const addonsThemeLoaderMainPath = path.join(
  //   process.cwd(),
  //   'src',
  //   '_main.scss',
  // );

  const addonsThemeLoaderVariablesPath = tmp.tmpNameSync({ postfix: '.scss' });
  const addonsThemeLoaderMainPath = tmp.tmpNameSync({ postfix: '.scss' });
  fs.writeFileSync(
    addonsThemeLoaderVariablesPath,
    new Buffer.from(getAddonsLoaderCode('variables', variables)),
  );
  fs.writeFileSync(
    addonsThemeLoaderMainPath,
    new Buffer.from(getAddonsLoaderCode('main', main)),
  );

  return [addonsThemeLoaderVariablesPath, addonsThemeLoaderMainPath];
};

module.exports.getAddonsLoaderCode = getAddonsLoaderCode;
module.exports.nameFromPackage = nameFromPackage;
